{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started Gravity SDK is a Unity and Unreal Engine package. It authorizes users who own NFT wearables and loads assets into your Unity project. To get Unity Package: Unity To get Unreal Engine Plugin: Unreal Engine","title":"Getting Started"},{"location":"#getting-started","text":"Gravity SDK is a Unity and Unreal Engine package. It authorizes users who own NFT wearables and loads assets into your Unity project. To get Unity Package: Unity To get Unreal Engine Plugin: Unreal Engine","title":"Getting Started"},{"location":"about/","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"about/#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"about/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"about/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"UE5/","text":"Unreal Engine 5.0 Plugin Gravity Layer plugin enables you to upload NFT wearables into your project. Gravity Layer plugin will be initialized with the project and NFT related functions will be called through the Gravity Layer subsystem. Getting Started To enable NFT wearable features, download our lates version of Gravity Layer Unreal Engine 5.0 plugin from our download page. Download Compatibility Info Gravity Layer plugin is only compatible with Unreal Engine 5.0 and higher. After downloading plugin, it should be enabled from unreal plugins. Integration After Integration Gravity Layer Plugin, Example project can be run and NFT wearables can be displayed on Unreal Engine 5.0 Level. Example If you have any questions about the plugin you can check troubleshoot section. Troubleshoot Dependencies glTFRuntime VaRest All dependencies are in Gravity Layer plugin repository. All required plugin files can be found on the zip file. For further information: glTFRuntime plugin, you can find their documentation here . VaRest plugin, you can find their documentation here . Acknowledgments A big thank you to Roberto De Ioris for providing this amazing glTFRuntime plugin for free and also providing support to all the users. We encourage anybody using this plugin to consider purchasing glTFRuntime from the Unreal Marketplace and help support its development. A big thank you to Vladimir Alyamkin for providing this amazing VaRest plugin for free and also providing support to all the users.","title":"Unreal Engine 5.0 Plugin"},{"location":"UE5/#unreal-engine-50-plugin","text":"Gravity Layer plugin enables you to upload NFT wearables into your project. Gravity Layer plugin will be initialized with the project and NFT related functions will be called through the Gravity Layer subsystem.","title":"Unreal Engine 5.0 Plugin"},{"location":"UE5/#getting-started","text":"To enable NFT wearable features, download our lates version of Gravity Layer Unreal Engine 5.0 plugin from our download page. Download Compatibility Info Gravity Layer plugin is only compatible with Unreal Engine 5.0 and higher. After downloading plugin, it should be enabled from unreal plugins. Integration After Integration Gravity Layer Plugin, Example project can be run and NFT wearables can be displayed on Unreal Engine 5.0 Level. Example If you have any questions about the plugin you can check troubleshoot section. Troubleshoot","title":"Getting Started"},{"location":"UE5/#dependencies","text":"glTFRuntime VaRest All dependencies are in Gravity Layer plugin repository. All required plugin files can be found on the zip file. For further information: glTFRuntime plugin, you can find their documentation here . VaRest plugin, you can find their documentation here .","title":"Dependencies"},{"location":"UE5/#acknowledgments","text":"A big thank you to Roberto De Ioris for providing this amazing glTFRuntime plugin for free and also providing support to all the users. We encourage anybody using this plugin to consider purchasing glTFRuntime from the Unreal Marketplace and help support its development. A big thank you to Vladimir Alyamkin for providing this amazing VaRest plugin for free and also providing support to all the users.","title":"Acknowledgments"},{"location":"UE5/GravityLayerPlugin/","text":"Get NFT Process To download nfts and display on your project: 1) Configure Metaverse SDK 2) Download NFT Inventory 3) Get NFTs of Account 4) Gravity Layer API Call 5) Gravity Layer Actor \u2003 5.1) Gravity Layer Actor Component \u2003 5.2) Gravity Layer File Load Component Configure Metaverse SDK To configure metaverse sdk open gravity layer GravityLayer::Configure() function and set sdk configuration parameters of account, api url and secret. On Configure function gravity layer plugin, Metaverse entry point is configured to have update events on NFT responses. It will listen stock, wardrobe and wardrobe services update events. GLMetaverseEntryPoint->GetStock()->OnStockUpdated.AddDynamic(this, &UGravityLayer::OnStockUpdate); GLMetaverseEntryPoint->GetWardrobe()->OnWardrobeUpdated.AddDynamic(this, &UGravityLayer::OnWardrobeUpdate); GLMetaverseEntryPoint->GetWardrobeServices()->OnWearableMetadataUpdate.AddDynamic(this, &UGravityLayer::OnWearableServiceUpdate); Download NFT Inventory To download NFT inventory, UGravityLayer::GetAllInteroperableWearables() should be called. This function will send a request to metaverse interface to download inventory with restfull cals. Results will be distributed through OnStockUpdated event. UGravityLayer::OnStockUpdate will be called when this update events fired. Get NFTs of Account To download user NFTs' GetUserInteroperableWearables method should be used. void UGravityLayer::GetUserInteroperableWearables(const FString& Account) Responses to this function wil be called to UGravityLayer::OnWardrobeUpdate() function. Gravity Layer API Call Gravity Layer Module is responsible for starting up the plugin. Entry point of Gravity Layer Plugins is GravityLayer subsystem. To access gravity layer subsystem you should include \"GravityLayer.h\" header and call get engine subsystem. // Include gravity layer header to access gravity layer subsystem \\#include \"GravityLayer.h\" ... UGravityLayer* GLSubSystem = GEngine->GetEngineSubsystem<UGravityLayer>(); Gravity Layer Actor Gravity Layer actor is used to download and diplay NFT's on the level. It has two Components : Skeletal Mesh component and Gravity Layer Component. Skeletal mesh component will be overriden by Gravity layer component Animation component should be selected to animate actor. Gravity Layer Actor Component Gravity Layer Actor Component is used for displaying nfs on levels as an object. It will get NFT model from Gravity Layer system with contact address and tokenId and set gravity layer actors skeletal mesh to Gravity Layer Actor's skeletal mesh. Select Avatar skeleton mesh from selection box. Gravity Layer File Load Component Gravity Layer File Load Component is used to test runtime asset delivery system. It will load glb files from local disk and display on level as an object.","title":"Get NFT Process"},{"location":"UE5/GravityLayerPlugin/#get-nft-process","text":"To download nfts and display on your project: 1) Configure Metaverse SDK 2) Download NFT Inventory 3) Get NFTs of Account 4) Gravity Layer API Call 5) Gravity Layer Actor \u2003 5.1) Gravity Layer Actor Component \u2003 5.2) Gravity Layer File Load Component","title":"Get NFT Process"},{"location":"UE5/GravityLayerPlugin/#configure-metaverse-sdk","text":"To configure metaverse sdk open gravity layer GravityLayer::Configure() function and set sdk configuration parameters of account, api url and secret. On Configure function gravity layer plugin, Metaverse entry point is configured to have update events on NFT responses. It will listen stock, wardrobe and wardrobe services update events. GLMetaverseEntryPoint->GetStock()->OnStockUpdated.AddDynamic(this, &UGravityLayer::OnStockUpdate); GLMetaverseEntryPoint->GetWardrobe()->OnWardrobeUpdated.AddDynamic(this, &UGravityLayer::OnWardrobeUpdate); GLMetaverseEntryPoint->GetWardrobeServices()->OnWearableMetadataUpdate.AddDynamic(this, &UGravityLayer::OnWearableServiceUpdate);","title":"Configure Metaverse SDK"},{"location":"UE5/GravityLayerPlugin/#download-nft-inventory","text":"To download NFT inventory, UGravityLayer::GetAllInteroperableWearables() should be called. This function will send a request to metaverse interface to download inventory with restfull cals. Results will be distributed through OnStockUpdated event. UGravityLayer::OnStockUpdate will be called when this update events fired.","title":"Download NFT Inventory"},{"location":"UE5/GravityLayerPlugin/#get-nfts-of-account","text":"To download user NFTs' GetUserInteroperableWearables method should be used. void UGravityLayer::GetUserInteroperableWearables(const FString& Account) Responses to this function wil be called to UGravityLayer::OnWardrobeUpdate() function.","title":"Get NFTs of Account"},{"location":"UE5/GravityLayerPlugin/#gravity-layer-api-call","text":"Gravity Layer Module is responsible for starting up the plugin. Entry point of Gravity Layer Plugins is GravityLayer subsystem. To access gravity layer subsystem you should include \"GravityLayer.h\" header and call get engine subsystem. // Include gravity layer header to access gravity layer subsystem \\#include \"GravityLayer.h\" ... UGravityLayer* GLSubSystem = GEngine->GetEngineSubsystem<UGravityLayer>();","title":"Gravity Layer API Call"},{"location":"UE5/GravityLayerPlugin/#gravity-layer-actor","text":"Gravity Layer actor is used to download and diplay NFT's on the level. It has two Components : Skeletal Mesh component and Gravity Layer Component. Skeletal mesh component will be overriden by Gravity layer component Animation component should be selected to animate actor.","title":"Gravity Layer Actor"},{"location":"UE5/GravityLayerPlugin/#_1","text":"","title":""},{"location":"UE5/GravityLayerPlugin/#gravity-layer-actor-component","text":"Gravity Layer Actor Component is used for displaying nfs on levels as an object. It will get NFT model from Gravity Layer system with contact address and tokenId and set gravity layer actors skeletal mesh to Gravity Layer Actor's skeletal mesh. Select Avatar skeleton mesh from selection box.","title":"Gravity Layer Actor Component"},{"location":"UE5/GravityLayerPlugin/#gravity-layer-file-load-component","text":"Gravity Layer File Load Component is used to test runtime asset delivery system. It will load glb files from local disk and display on level as an object.","title":"Gravity Layer File Load Component"},{"location":"UE5/UnrealEngine5Download/","text":"Downloads Gravity Layer Unreal Engine 5 Plugin Downloads Project Info Gravity Layer Unreal Plugin is designed to work with C++ projects. Latest release Download Gravity Layer Unreal Plugin Download the plugin: 1) Open Pluginin git relsease page. 2) Go to the lastest release . 3) Click on Download Zip or Tar.gz button. Intall the plugin: To add plugins to your project, go to your Plugins folder under your project directory. If there is no Plugins folder, then you need to create one folder and name it \"Plugins\" under your project directory. Open Zip file and copy its content to Plugins folder. Now, You can continue with integration process. Integration","title":"Download"},{"location":"UE5/UnrealEngine5Download/#downloads","text":"Gravity Layer Unreal Engine 5 Plugin Downloads Project Info Gravity Layer Unreal Plugin is designed to work with C++ projects.","title":"Downloads"},{"location":"UE5/UnrealEngine5Download/#latest-release","text":"Download Gravity Layer Unreal Plugin Download the plugin: 1) Open Pluginin git relsease page. 2) Go to the lastest release . 3) Click on Download Zip or Tar.gz button. Intall the plugin: To add plugins to your project, go to your Plugins folder under your project directory. If there is no Plugins folder, then you need to create one folder and name it \"Plugins\" under your project directory. Open Zip file and copy its content to Plugins folder. Now, You can continue with integration process. Integration","title":"Latest release"},{"location":"UE5/UnrealEngine5Example/","text":"Example Gravity Layer Unreal Engine 5 Plugin Example. Project Info To open Gravity Layer example level, you should enable \"Show Plugin Content\" under Content Drawer > Settings > Show Plugin Content. Open Example Level To how the sample integration process, you can find example level for out plugin under Plugins \\ Gravity Layer Content \\ Level folder. Open level and press play button to see 3 characters. Left most avatar is loaded from fbx file to test the original model. Character on the middle will be added to level after few seconds which will be loaded from Gravity Layer servers. Right most character will be loaded from glb files to test the model. A few seconds after the level starts, you will see three characters. Outliner In the outliner, there are 3 different actors: BP_GL_LoadFromFileActor : loads character form glb file. BP_GravityLayer : loads character from Gravity layer server. BP_Sample_FBX : fbx file to test. Gravity Layer Chracter You should select avatar skeleton for your characters skeleton system.","title":"Example"},{"location":"UE5/UnrealEngine5Example/#example","text":"Gravity Layer Unreal Engine 5 Plugin Example. Project Info To open Gravity Layer example level, you should enable \"Show Plugin Content\" under Content Drawer > Settings > Show Plugin Content.","title":"Example"},{"location":"UE5/UnrealEngine5Example/#open-example-level","text":"To how the sample integration process, you can find example level for out plugin under Plugins \\ Gravity Layer Content \\ Level folder. Open level and press play button to see 3 characters. Left most avatar is loaded from fbx file to test the original model. Character on the middle will be added to level after few seconds which will be loaded from Gravity Layer servers. Right most character will be loaded from glb files to test the model. A few seconds after the level starts, you will see three characters.","title":"Open Example Level"},{"location":"UE5/UnrealEngine5Example/#outliner","text":"In the outliner, there are 3 different actors: BP_GL_LoadFromFileActor : loads character form glb file. BP_GravityLayer : loads character from Gravity layer server. BP_Sample_FBX : fbx file to test.","title":"Outliner"},{"location":"UE5/UnrealEngine5Example/#gravity-layer-chracter","text":"You should select avatar skeleton for your characters skeleton system.","title":"Gravity Layer Chracter"},{"location":"UE5/UnrealEngine5Integration/","text":"Integration Gravity Layer Unreal Engine 5 Plugin Integration. Once, you download the plugins zip and open GravityLayerUEPlugin-Plugins folder. Copy its content to plugins folder, you can continue with enabling plugins in your projects. Integration Info You need to restart your project if it was open during copying the plugin content. Enable Plugins Open your project, and use settings button and open plugins menu. Search for Gravity Layer and select the tick to enable gravity layer plugin. This will automaticly enable dependency plugins as well. glTFRuntime VaRest 3. Click on Restart button to enable Gravity Layer plugin. After restart you are finished with integrating gravity layer plugin into your game. Show Plugin Content To view plugin content and sample map, you need to enable Show Plugin Content from Content Browser > Settings menu. Access Gravity Layer Plugin To access gravity layer plugin you need to add gravity layer plugin into your public dependencies. Open your project solution and go to project's [PROJECT_NAME].Build.cs file and add \"Gravity Layer\" to your public dependency modules. PublicDependencyModuleNames.AddRange(new string[] { ... \"GravityLayer\" });` After adding Gravity layer as a dependency to your project, you can include graravity layer subsystem to your project. Now, You can continue with Example Content for Gravity Layer. Example","title":"Integration"},{"location":"UE5/UnrealEngine5Integration/#integration","text":"Gravity Layer Unreal Engine 5 Plugin Integration. Once, you download the plugins zip and open GravityLayerUEPlugin-Plugins folder. Copy its content to plugins folder, you can continue with enabling plugins in your projects. Integration Info You need to restart your project if it was open during copying the plugin content.","title":"Integration"},{"location":"UE5/UnrealEngine5Integration/#enable-plugins","text":"Open your project, and use settings button and open plugins menu. Search for Gravity Layer and select the tick to enable gravity layer plugin. This will automaticly enable dependency plugins as well. glTFRuntime VaRest 3. Click on Restart button to enable Gravity Layer plugin. After restart you are finished with integrating gravity layer plugin into your game.","title":"Enable Plugins"},{"location":"UE5/UnrealEngine5Integration/#show-plugin-content","text":"To view plugin content and sample map, you need to enable Show Plugin Content from Content Browser > Settings menu.","title":"Show Plugin Content"},{"location":"UE5/UnrealEngine5Integration/#access-gravity-layer-plugin","text":"To access gravity layer plugin you need to add gravity layer plugin into your public dependencies. Open your project solution and go to project's [PROJECT_NAME].Build.cs file and add \"Gravity Layer\" to your public dependency modules. PublicDependencyModuleNames.AddRange(new string[] { ... \"GravityLayer\" });` After adding Gravity layer as a dependency to your project, you can include graravity layer subsystem to your project. Now, You can continue with Example Content for Gravity Layer. Example","title":"Access Gravity Layer Plugin"},{"location":"UE5/UnrealEngine5Troubleshoot/","text":"Unreal Engine Plugin Troubleshoot You can reach us from discord channel. Gravity Layer Discord Channel","title":"Troubleshoot"},{"location":"UE5/UnrealEngine5Troubleshoot/#unreal-engine-plugin-troubleshoot","text":"You can reach us from discord channel. Gravity Layer Discord Channel","title":"Unreal Engine Plugin Troubleshoot"},{"location":"Unity/","text":"Unity SDK In order to show wearables in a game (scene) you need to do the next steps. Connect to a user\u2019s Metamask wallet on Polygon chain. Authorize a user in Gravity API. Fetch user\u2019s wearables Equip selected wearable. Flow scheme: A single entry point for Gravity SDK is the class GravityLayerEntryPoint . Connection to Metamask To connect to a Metamask wallet, call Web3Connect() method from Assets/Plugins/GravityLayer/Example/Scripts/WebLogin.cs . After successful logging in the user\u2019s address will be available at PlayerPrefs.GetString(\"Account\") . Example . See Assets/Plugins/GravityLayer/Example/Scenes/WebLogin.unity . Authorization The method EstablishConnection() from Assets/Plugins/GravityLayer/CoreAsync/Utils/Connection.cs authorizes users in Gravity API. It asks the user to sign a message via Metamask and if successful saves an authorization token for further requests. Example . See GravitySDK game object and attached GLayerManager.cs script in Assets/Plugins/GravityLayer/Example/Scenes/ExampleGravitySDK.unity scene. Fetching wearables To fetch wearables call FetchWearables() method from Assets/Plugins/GravityLayer/CoreAsync/Wearables/Wardrobe.cs . It will fill in the public variable List<Wearable> Wearables . Example . See FetchGLayerWearables() method in Assets/Plugins/GravityLayer/Example/Scripts/CustomizedInventory.cs script in Assets/Plugins/GravityLayer/Example/Scenes/ExampleGravitySDK.unity scene. Equipping wearables To equip a wearable call DownloadAvatar() method from the Downloader class. Example . See DownloadAvatar() method in Assets/Plugins/GravityLayer/Example/Scripts/Inventory/ItemWearable.cs script in Assets/Plugins/GravityLayer/Example/Scenes/ExampleGravitySDK.unity scene.","title":"Unity SDK"},{"location":"Unity/#unity-sdk","text":"In order to show wearables in a game (scene) you need to do the next steps. Connect to a user\u2019s Metamask wallet on Polygon chain. Authorize a user in Gravity API. Fetch user\u2019s wearables Equip selected wearable. Flow scheme: A single entry point for Gravity SDK is the class GravityLayerEntryPoint .","title":"Unity SDK"},{"location":"Unity/#connection-to-metamask","text":"To connect to a Metamask wallet, call Web3Connect() method from Assets/Plugins/GravityLayer/Example/Scripts/WebLogin.cs . After successful logging in the user\u2019s address will be available at PlayerPrefs.GetString(\"Account\") . Example . See Assets/Plugins/GravityLayer/Example/Scenes/WebLogin.unity .","title":"Connection to Metamask"},{"location":"Unity/#authorization","text":"The method EstablishConnection() from Assets/Plugins/GravityLayer/CoreAsync/Utils/Connection.cs authorizes users in Gravity API. It asks the user to sign a message via Metamask and if successful saves an authorization token for further requests. Example . See GravitySDK game object and attached GLayerManager.cs script in Assets/Plugins/GravityLayer/Example/Scenes/ExampleGravitySDK.unity scene.","title":"Authorization"},{"location":"Unity/#fetching-wearables","text":"To fetch wearables call FetchWearables() method from Assets/Plugins/GravityLayer/CoreAsync/Wearables/Wardrobe.cs . It will fill in the public variable List<Wearable> Wearables . Example . See FetchGLayerWearables() method in Assets/Plugins/GravityLayer/Example/Scripts/CustomizedInventory.cs script in Assets/Plugins/GravityLayer/Example/Scenes/ExampleGravitySDK.unity scene.","title":"Fetching wearables"},{"location":"Unity/#equipping-wearables","text":"To equip a wearable call DownloadAvatar() method from the Downloader class. Example . See DownloadAvatar() method in Assets/Plugins/GravityLayer/Example/Scripts/Inventory/ItemWearable.cs script in Assets/Plugins/GravityLayer/Example/Scenes/ExampleGravitySDK.unity scene.","title":"Equipping wearables"},{"location":"Unity/examples/","text":"WebGL Example There are two scenes: Plugins/GravityLayer/Example/Scenes/WebLogin - allows users to connect a Metamask wallet Plugins/GravityLayer/Example/Scenes/ExampleGravitySDK - demonstrates how a user is authorized and wearables are loaded through Gravity API Install Dependency The WebGL example requires the GLTFUtility package to be installed. To install it Go to \u201cWindow / Package Manager\u201d Click \u201c+\u201d button Select \u201cAdd package from git URL\u201d Paste https://github.com/siccity/gltfutility.git and click \u201cAdd\u201d Click \u201cImport\u201d Download and install WebGL example Download gravitylayer-unitysdk-webgl-example.unitypackage from Releases . To install the package Go to \u201cAssets / Import Package / Custom Package\u201d Select gravitylayer-unitysdk-webgl-example.unitypackage Click \u201cImport\u201d Prepare WebGL build To make a build Go to \u201cFile / Build Settings\u201d Switch Platform to WebGL Click \u201cPlayer Settings\u201d Select \u201cPlayer\u201d section Expand \u201cResolution and Presentation\u201d Select Web3GL - 2020x Expand Publishing Setting Switch \u201cCompression Format\u201d to \u201cDisabled\u201d and close \u201cPlayer Settings\u201d Add WebLogin scene to the build (drag it from Project hierarchy window to Build Settings window) Add ExampleGravitySDK scene to the build. Click \u201cBuild\u201d and type a new folder name for build. Run locally In order a demo to work properly you need to run a proxy server for Gravity API. We already set it up (you will need Node.js and npm to be installed). To install the proxy server: Clone it from here . Open its folder and type: npm i npm run serve After that, copy all content from the build folder you created above to the folder \u201cwebgl\u201d (or you can delete \u201cwebgl\u201d then copy the build folder and rename it to \u201cwebgl\u201d). That\u2019s it. Type in your browser http://localhost:3000/ and it should work.","title":"Usage Example"},{"location":"Unity/examples/#webgl-example","text":"There are two scenes: Plugins/GravityLayer/Example/Scenes/WebLogin - allows users to connect a Metamask wallet Plugins/GravityLayer/Example/Scenes/ExampleGravitySDK - demonstrates how a user is authorized and wearables are loaded through Gravity API","title":"WebGL Example"},{"location":"Unity/examples/#install-dependency","text":"The WebGL example requires the GLTFUtility package to be installed. To install it Go to \u201cWindow / Package Manager\u201d Click \u201c+\u201d button Select \u201cAdd package from git URL\u201d Paste https://github.com/siccity/gltfutility.git and click \u201cAdd\u201d Click \u201cImport\u201d","title":"Install Dependency"},{"location":"Unity/examples/#download-and-install-webgl-example","text":"Download gravitylayer-unitysdk-webgl-example.unitypackage from Releases . To install the package Go to \u201cAssets / Import Package / Custom Package\u201d Select gravitylayer-unitysdk-webgl-example.unitypackage Click \u201cImport\u201d","title":"Download and install WebGL example"},{"location":"Unity/examples/#prepare-webgl-build","text":"To make a build Go to \u201cFile / Build Settings\u201d Switch Platform to WebGL Click \u201cPlayer Settings\u201d Select \u201cPlayer\u201d section Expand \u201cResolution and Presentation\u201d Select Web3GL - 2020x Expand Publishing Setting Switch \u201cCompression Format\u201d to \u201cDisabled\u201d and close \u201cPlayer Settings\u201d Add WebLogin scene to the build (drag it from Project hierarchy window to Build Settings window) Add ExampleGravitySDK scene to the build. Click \u201cBuild\u201d and type a new folder name for build.","title":"Prepare WebGL build"},{"location":"Unity/examples/#run-locally","text":"In order a demo to work properly you need to run a proxy server for Gravity API. We already set it up (you will need Node.js and npm to be installed). To install the proxy server: Clone it from here . Open its folder and type: npm i npm run serve After that, copy all content from the build folder you created above to the folder \u201cwebgl\u201d (or you can delete \u201cwebgl\u201d then copy the build folder and rename it to \u201cwebgl\u201d). That\u2019s it. Type in your browser http://localhost:3000/ and it should work.","title":"Run locally"},{"location":"Unity/installation/","text":"Installation Copy the files from the UnitySDK-CoreAsync repository into a separate folder in your Unity project. For instance, into Assets/Plugins/GravityLayer/CoreAsync . Alternatively you can download a Unity package file from Releases . To install the package Go to \u201cAssets / Import Package / Custom Package\u201d Select gravitylayer-unitysdk-coreasync.unitypackage Click \u201cImport\u201d","title":"Installation"},{"location":"Unity/installation/#installation","text":"Copy the files from the UnitySDK-CoreAsync repository into a separate folder in your Unity project. For instance, into Assets/Plugins/GravityLayer/CoreAsync . Alternatively you can download a Unity package file from Releases . To install the package Go to \u201cAssets / Import Package / Custom Package\u201d Select gravitylayer-unitysdk-coreasync.unitypackage Click \u201cImport\u201d","title":"Installation"}]}